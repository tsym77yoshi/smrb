import type { VideoEffectType, VarNumbers, VideoEffect, AudioEffectType, AudioEffect } from "@/types/itemType";

const Varnum = (arg: number) => {
  return {
    values: [{ value: arg }],
    span: 0,
    animationType: "なし",
  } as VarNumbers;
};
// 個々の型は
// ToEffectType<typeof allEffects["/*エフェクト名*/"]>
const defaultInOutEffectCommonProperties = {
  isInEffect: true,
  isOutEffect: true,
  effectTimeSeconds: 0.3,
  easingType: "Expo",
  easingMode: "Out",
} as const
export const defaultVideoEffects: Record<VideoEffectType, VideoEffect> = {
  centerPointEffect: {
    type: "centerPointEffect",
    isEnabled: true,
    horizontal: "Original",
    vertical: "Original",
    x: Varnum(0),
    y: Varnum(0),
    isKeepPosition: false,
  },
  borderBlurEffect: {
    type: "borderBlurEffect",
    isEnabled: true,
    blur: Varnum(10),
  },
  gaussianBlurEffect: {
    type: "gaussianBlurEffect",
    isEnabled: true,
    blur: Varnum(10),
    isHardBorderMode: false,
  },
  shadowEffect: {
    type: "shadowEffect",
    isEnabled: true,
    x: Varnum(0),
    y: Varnum(0),
    opacity: Varnum(50),
    zoom: Varnum(100),
    angle: Varnum(0),
    blur: Varnum(3.0),
    color: "#ffffffff",
    isRotateAtCenter: false,
  },
  outlineEffect: {
    type: "outlineEffect",
    isEnabled: true,
    strokeThickness: Varnum(3),
    blur: Varnum(0),
    x: Varnum(0),
    y: Varnum(0),
    opacity: Varnum(100),
    zoom: Varnum(100),
    rotation: Varnum(0),
    color: "#ffffffff",
    isOutlineOnly: false,
    isAngular: false,
  },
  cropByAngleEffect: {
    type: "cropByAngleEffect",
    isEnabled: true,
    x: Varnum(0),
    y: Varnum(0),
    angle: Varnum(0),
    blur: Varnum(0),
    width: Varnum(0),
  },
  monocolorizationEffect: {
    type: "monocolorizationEffect",
    isEnabled: true,
    strength: Varnum(100),
    color: "#ffffffff",
    keepBrightness: true,
  },
  opacityEffect: {
    type: "opacityEffect",
    isEnabled: true,
    opacity: Varnum(100),
    isAbsolute: false,
  },
  tilingEffect: {
    type: "tilingEffect",
    isEnabled: true,
    x: Varnum(3),
    y: Varnum(3),
  },
  marginEffect: {
    type: "marginEffect",
    isEnabled: true,
    top: Varnum(0),
    bottom: Varnum(0),
    left: Varnum(0),
    right: Varnum(0),
  },
  colorCorrectionEffect: {
    type: "colorCorrectionEffect",
    isEnabled: true,
    lightness: Varnum(100),
    contrast: Varnum(100),
    hueRotation: Varnum(0),
    brightness: Varnum(100),
    saturation: Varnum(100),
  },
  cropEffect: {
    type: "cropEffect",
    isEnabled: true,
    top: Varnum(0),
    bottom: Varnum(0),
    left: Varnum(0),
    right: Varnum(0),
    isCentering: true,
  },
  // 後で確認
  jumpEffect: {
    type: "jumpEffect",
    isEnabled: true,
    jumpHeight: Varnum(0),
    stretch: Varnum(0),
    period: Varnum(0),
    distortion: Varnum(0),
    interval: Varnum(0),
    x: Varnum(0),
    y: Varnum(0),
  },
  radialBlurEffect: {
    type: "radialBlurEffect",
    isEnabled: true,
    blur: Varnum(10),
    x: Varnum(0),
    y: Varnum(0),
    isHardBorderMode: false,
  },
  directionalBlurEffect: {
    type: "directionalBlurEffect",
    isEnabled: true,
    standardDeviation: Varnum(100),
    angle: Varnum(0),
    isHardBorderMode: false,
  },
  zoomEffect: {
    type: "zoomEffect",
    isEnabled: true,
    zoom: Varnum(100),
    zoomX: Varnum(100),
    zoomY: Varnum(100),
    isNearestNeighbor: false,
  },
  inOutGaussianBlurEffect: {
    ...defaultInOutEffectCommonProperties,
    type: "inOutGaussianBlurEffect",
    isEnabled: true,
    value: 3,
  },
  inOutMosaicEffect: {
    ...defaultInOutEffectCommonProperties,
    type: "inOutMosaicEffect",
    isEnabled: true,
    value: 3,
  },
  inOutMoveEffect: {
    ...defaultInOutEffectCommonProperties,
    type: "inOutMoveEffect",
    isEnabled: true,
    value: 0,
    value1: 0,
    value2: 0,
  },
  inOutMoveFromOutsideFrameEffect: {
    ...defaultInOutEffectCommonProperties,
    type: "inOutMoveFromOutsideFrameEffect",
    isEnabled: true,
    value: "Left",
  },
  inOutRotateEffect: {
    ...defaultInOutEffectCommonProperties,
    type: "inOutRotateEffect",
    isEnabled: true,
    valueX: 0,
    valueY: 0,
    valueZ: 0,
    is3D: false,
  },
  inOutZoomEffect: {
    ...defaultInOutEffectCommonProperties,
    type: "inOutZoomEffect",
    isEnabled: true,
    value: 0,
    x: 100,
    y: 100,
  },
  inOutJumpEffect: {
    ...defaultInOutEffectCommonProperties,
    type: "inOutJumpEffect",
    isEnabled: true,
    jumpHeight: 0,
    stretch: 0,
    period: 0,
    distortion: 0,
    interval: 0,
    x: 0,
    y: 0,
  },
  inOutMoveFromOutsideImageEffect: {
    ...defaultInOutEffectCommonProperties,
    type: "inOutMoveFromOutsideImageEffect",
    isEnabled: true,
    value: "Left",
  },
}
export const defaultAudioEffects: Record<AudioEffectType, AudioEffect> = {
  echoEffect: {
    type: "echoEffect",
    isEnabled: true,
    strength: Varnum(0),
    delay: Varnum(0),
    feedBack: Varnum(0),
  },
}